<!DOCTYPE html>

<html lang="es">
    <head>
    <title>{{ title }}</title>
    <link rel="icon" href="images/kinetia.png" type="image/jpg">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="robots" content="index, follow">
    <meta name="description" content="Explora el futuro de la creación de contenido con IA y automatización. Servicios personalizados para empresas modernas.">
    <meta name="keywords" content="automatización, inteligencia artificial, IA, creación de contenido, contenido con IA, productividad empresarial, eficiencia digital, automatización procesos, Kinetia">

    <!-- Open Graph -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="Kinetia | Automatización con IA para empresas modernas">
    <meta property="og:description" content="Explora el futuro de la creación de contenido con IA y automatización. Servicios personalizados para empresas modernas.">
    <meta property="og:url" content="https://kinetia.tech">
    <meta property="og:image" content="https://kinetia.tech/images/banner.png">

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Kinetia | Automatización con IA para empresas modernas">
    <meta name="twitter:description" content="Transforma tu negocio con automatización, IA y contenido inteligente.">
    <meta name="twitter:image" content="https://kinetia.tech/images/twitter.png">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/main.css">
    <script src="/scripts/general/functions.js"></script>
  </head>
  <body>
    {% include 'header.njk' %}

    {% block content %}

        {{ content | safe }}

    {% endblock %}
    
    {% include 'button.njk' %}
    {% include 'footer.njk' %}

    <script src="/scripts/general/setup.js"></script>

    <script>
      function loadScript(a){
        var b = document.getElementsByTagName("head")[0],
            c = document.createElement("script");
        c.type = "text/javascript";
        c.src = "https://tracker.metricool.com/resources/be.js";
        c.onreadystatechange = a;
        c.onload = a;
        b.appendChild(c);
      }
      loadScript(function(){
        beTracker.t({hash:"108ffc91db984e982d0f1abfd84c3856"});
      });
    </script>

  </body>
  </html>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot Kinetia</title>
    <style>
        /* Estilos para el botón del chatbot */
        .kinetia-chat-button {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 65px;
            height: 65px;
            background-color: #f77c18;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(247, 124, 24, 0.4);
            transition: all 0.3s ease;
            z-index: 999;
        }

        .kinetia-chat-button:hover {
            transform: scale(1.1);
            box-shadow: 0 0 25px rgba(247, 124, 24, 0.7);
        }

        .kinetia-chat-icon {
            width: 30px;
            height: 30px;
            fill: #222;
        }

        /* Estilos para la ventana del chat - Modo oscuro */
        .kinetia-chat-window {
            position: fixed;
            bottom: 110px;
            right: 30px;
            width: 380px;
            height: 500px;
            background-color: #222;
            border-radius: 15px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(247, 124, 24, 0.1), 0 0 15px rgba(247, 124, 24, 0.2);
            display: none;
            flex-direction: column;
            overflow: hidden;
            z-index: 998;
            transition: all 0.3s ease;
            border: 1px solid #333;
        }

        .kinetia-chat-window.active {
            display: flex;
            animation: chatWindowOpen 0.4s ease forwards;
        }

        @keyframes chatWindowOpen {
            0% { opacity: 0; transform: translateY(20px); }
            100% { opacity: 1; transform: translateY(0); }
        }

        /* Header del chat */
        .kinetia-chat-header {
            background-color: #1a1a1a;
            color: white;
            padding: 15px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 2px solid #f77c18;
            position: relative;
            overflow: hidden;
        }

        /* Efecto de borde neón */
        .kinetia-chat-header::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #f77c18, transparent);
            animation: neonBorder 3s linear infinite;
        }

        @keyframes neonBorder {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .kinetia-chat-title {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .kinetia-chat-logo {
            width: 28px;
            height: 28px;
        }

        .kinetia-chat-title h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
            color: #f77c18;
            text-shadow: 0 0 5px rgba(247, 124, 24, 0.3);
        }

        .kinetia-chat-close {
            background: none;
            border: none;
            color: #f77c18;
            font-size: 22px;
            cursor: pointer;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            text-shadow: 0 0 5px rgba(247, 124, 24, 0.3);
        }

        /* Área de seguimiento del ratón - Línea continua */
        .kinetia-mouse-tracker {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 999;
            overflow: hidden;
        }

        .kinetia-mouse-trail {
            position: absolute;
            width: 2px;
            height: 2px;
            background: radial-gradient(circle, rgba(247, 124, 24, 0.8) 0%, rgba(247, 124, 24, 0.4) 50%, transparent 100%);
            border-radius: 50%;
            pointer-events: none;
            box-shadow: 0 0 10px rgba(247, 124, 24, 0.6);
        }

        /* Contenido del chat */
        .kinetia-chat-body {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #2a2a2a;
            position: relative;
            background-image: 
                radial-gradient(circle at 20% 30%, rgba(247, 124, 24, 0.03) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(247, 124, 24, 0.03) 0%, transparent 50%);
        }

        /* Estilizar la barra de desplazamiento */
        .kinetia-chat-body::-webkit-scrollbar {
            width: 6px;
        }

        .kinetia-chat-body::-webkit-scrollbar-track {
            background: #333;
        }

        .kinetia-chat-body::-webkit-scrollbar-thumb {
            background: #f77c18;
            border-radius: 10px;
        }

        .kinetia-chat-body::-webkit-scrollbar-thumb:hover {
            background: #ff8c28;
        }

        .kinetia-chat-message {
            margin-bottom: 15px;
            max-width: 80%;
            padding: 12px 15px;
            border-radius: 15px;
            position: relative;
            font-size: 15px;
            line-height: 1.4;
        }

        .kinetia-chat-message.bot {
            background-color: #3a3a3a;
            color: #e0e0e0;
            border-top-left-radius: 0;
            align-self: flex-start;
            margin-right: auto;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            border-left: 2px solid #f77c18;
        }

        .kinetia-chat-message.user {
            background-color: #f77c18;
            color: #222;
            border-top-right-radius: 0;
            align-self: flex-end;
            margin-left: auto;
            font-weight: 500;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        /* Efecto de glow en hover */
        .kinetia-chat-message.user:hover {
            box-shadow: 0 0 15px rgba(247, 124, 24, 0.4);
        }

        /* Área para escribir mensajes */
        .kinetia-chat-input-area {
            padding: 15px;
            border-top: 1px solid #333;
            display: flex;
            background-color: #1a1a1a;
            position: relative;
        }

        .kinetia-chat-input-area::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(247, 124, 24, 0.3), transparent);
        }

        .kinetia-chat-input {
            flex-grow: 1;
            padding: 12px 15px;
            border: 1px solid #444;
            border-radius: 25px;
            outline: none;
            font-size: 15px;
            resize: none;
            max-height: 100px;
            min-height: 24px;
            background-color: #333;
            color: #e0e0e0;
            transition: all 0.3s ease;
        }

        .kinetia-chat-input:focus {
            border-color: #f77c18;
            box-shadow: 0 0 0 1px rgba(247, 124, 24, 0.3);
        }

        .kinetia-chat-input::placeholder {
            color: #888;
        }

        .kinetia-chat-send {
            background-color: #f77c18;
            color: #222;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-left: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
        }

        .kinetia-chat-send:hover {
            background-color: #ff8c28;
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(247, 124, 24, 0.4);
        }

        /* Efecto pulsante en el botón de enviar */
        .kinetia-chat-send::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(-50%, -50%) scale(0);
            animation: ripple 1.5s ease-out infinite;
        }

        @keyframes ripple {
            0% { transform: translate(-50%, -50%) scale(0); opacity: 1; }
            100% { transform: translate(-50%, -50%) scale(2.5); opacity: 0; }
        }

        .kinetia-chat-messages {
            display: flex;
            flex-direction: column;
        }

        /* Animación para el botón de chat */
        @keyframes pulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(247, 124, 24, 0.7); }
            70% { transform: scale(1.1); box-shadow: 0 0 0 15px rgba(247, 124, 24, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(247, 124, 24, 0); }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        /* Notificación de nuevo mensaje */
        .kinetia-chat-notification {
            position: absolute;
            top: -8px;
            right: -5px;
            background-color: #ff4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            display: none;
            box-shadow: 0 0 10px rgba(255, 68, 68, 0.7);
        }

        /* Indicador de escritura con efecto neón */
        .typing-indicator {
            display: flex;
            align-items: center;
        }

        .typing-indicator::after {
            content: '';
            display: inline-block;
            width: 4px;
            height: 4px;
            margin-left: 2px;
            background-color: #f77c18;
            border-radius: 50%;
            box-shadow: 0 0 8px #f77c18, 0 0 16px #f77c18;
            animation: blink 1.5s infinite;
        }

        .typing-indicator::before {
            content: '';
            display: inline-block;
            width: 4px;
            height: 4px;
            margin-left: 6px;
            background-color: #f77c18;
            border-radius: 50%;
            box-shadow: 0 0 8px #f77c18, 0 0 16px #f77c18;
            animation: blink 1.5s infinite 0.5s;
        }

        @keyframes blink {
            0%, 100% { opacity: 0; }
            50% { opacity: 1; }
        }

        /* Estilos responsivos */
        @media (max-width: 480px) {
            .kinetia-chat-window {
                width: 100%;
                height: 100%;
                bottom: 0;
                right: 0;
                border-radius: 0;
            }
            
            .kinetia-chat-button {
                bottom: 20px;
                right: 20px;
            }
        }
    </style>
</head>
<body>

    <div class="kinetia-chat-button pulse" id="kinetiaChatButton">
        <span class="kinetia-chat-notification" id="kinetiaChatNotification">1</span>
        <svg class="kinetia-chat-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 2H4C2.9 2 2 2.9 2 4V22L6 18H20C21.1 18 22 17.1 22 16V4C22 2.9 21.1 2 20 2ZM20 16H6L4 18V4H20V16Z"/>
        </svg>
    </div>

    <!-- Ventana del chatbot -->
    <div class="kinetia-chat-window" id="kinetiaChatWindow">
        <div class="kinetia-mouse-tracker" id="kinetiaMouseTracker"></div>
        <div class="kinetia-chat-header">
            <div class="kinetia-chat-title">
                <svg class="kinetia-chat-logo" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="#f77c18" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                    <path fill="#f77c18" d="M12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm0 10c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z"/>
                </svg>
                <h3>Asistente Kinetia</h3>
            </div>
            <button class="kinetia-chat-close" id="kinetiaChatClose">×</button>
        </div>
        <div class="kinetia-chat-body">
            <div class="kinetia-chat-messages" id="kinetiaChatMessages">
                <!-- Los mensajes se cargarán dinámicamente -->
            </div>
        </div>
        <div class="kinetia-chat-input-area">
            <input type="text" class="kinetia-chat-input" id="kinetiaChatInput" placeholder="Escribe tu mensaje aquí..." />
            <button class="kinetia-chat-send" id="kinetiaChatSend">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2 21L23 12L2 3V10L17 12L2 14V21Z" fill="#222"/>
                </svg>
            </button>
        </div>
    </div>

    <script>
        // Funcionalidad del chatbot
        document.addEventListener('DOMContentLoaded', function() {
            const chatButton = document.getElementById('kinetiaChatButton');
            const chatWindow = document.getElementById('kinetiaChatWindow');
            const chatClose = document.getElementById('kinetiaChatClose');
            const chatInput = document.getElementById('kinetiaChatInput');
            const chatSend = document.getElementById('kinetiaChatSend');
            const chatMessages = document.getElementById('kinetiaChatMessages');
            const chatNotification = document.getElementById('kinetiaChatNotification');
            
            // URL del webhook - REEMPLAZAR CON TU URL REAL DE N8N
            const webhookUrl = 'https://n8n.kinetia.tech/webhook/9cfc5452-bddc-45de-b93b-1fd6687db9bc';
            
            // Mostrar mensaje de bienvenida al abrir el chat
            chatButton.addEventListener('click', function() {
                const wasActive = chatWindow.classList.contains('active');
                chatWindow.classList.toggle('active');
                chatButton.classList.remove('pulse');
                chatNotification.style.display = 'none';
                
                // Si se está abriendo el chat por primera vez y no hay mensajes
                if (!wasActive && chatMessages.children.length === 0) {
                    addMessage('¡Hola! Soy el asistente virtual de Kinetia. ¿En qué puedo ayudarte hoy?', 'bot');
                }
                
                chatInput.focus();
            });
            
            chatClose.addEventListener('click', function() {
                chatWindow.classList.remove('active');
            });
            
            // Función para enviar mensaje
            function sendMessage() {
                const message = chatInput.value.trim();
                if (message) {
                    // Agregar mensaje del usuario al chat
                    addMessage(message, 'user');
                    
                    // Limpiar campo de entrada
                    chatInput.value = '';
                    
                    // Mostrar indicador de escritura
                    addTypingIndicator();
                    
                    // Preparar datos para enviar al webhook
                    const requestData = {
                        message: message,
                        userId: generateUserId(),
                        timestamp: new Date().toISOString(),
                        source: 'kinetia-website'
                    };
                    
                    console.log('Enviando datos al webhook:', requestData);
                    console.log('URL del webhook:', webhookUrl);
                    
                    // Enviar mensaje al webhook de n8n
                    fetch(webhookUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    })
                    .then(response => {
                        console.log('Estado de respuesta:', response.status);
                        console.log('Headers de respuesta:', response.headers);
                        
                        if (!response.ok) {
                            throw new Error(`Error HTTP: ${response.status} - ${response.statusText}`);
                        }
                        
                        // Verificar si la respuesta tiene contenido
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            return response.json();
                        } else {
                            // Si no es JSON, obtener como texto
                            return response.text().then(text => {
                                console.log('Respuesta como texto:', text);
                                return { response: text || 'Mensaje recibido correctamente.' };
                            });
                        }
                    })
                    .then(data => {
                        console.log('Datos procesados recibidos:', data);
                        removeTypingIndicator();
                        
                        // Buscar la respuesta en diferentes campos posibles
                        let botResponse = null;
                        
                        if (data.response) {
                            botResponse = data.response;
                        } else if (data.message) {
                            botResponse = data.message;
                        } else if (data.reply) {
                            botResponse = data.reply;
                        } else if (data.answer) {
                            botResponse = data.answer;
                        } else if (data.text) {
                            botResponse = data.text;
                        } else if (typeof data === 'string') {
                            botResponse = data;
                        } else {
                            // Si es un objeto, intentar obtener el primer valor string
                            const values = Object.values(data);
                            botResponse = values.find(val => typeof val === 'string') || 'Respuesta recibida de n8n.';
                        }
                        
                        addMessage(botResponse, 'bot');
                    })
                    .catch(error => {
                        console.error('Error detallado:', error);
                        removeTypingIndicator();
                        
                        // Mensaje de error más informativo
                        let errorMessage = 'Lo siento, no puedo conectarme con el servidor en este momento. ';
                        
                        if (error.message.includes('Failed to fetch')) {
                            errorMessage += 'Por favor, verifica que la URL del webhook sea correcta y que n8n esté ejecutándose.';
                        } else if (error.message.includes('404')) {
                            errorMessage += 'El endpoint del webhook no se encontró. Verifica la URL en n8n.';
                        } else if (error.message.includes('500')) {
                            errorMessage += 'Hay un error en el flujo de n8n. Revisa los logs del workflow.';
                        } else {
                            errorMessage += 'Error: ' + error.message;
                        }
                        
                        addMessage(errorMessage, 'bot');
                    });
                }
            }
            
            // Función para añadir mensajes al chat
            function addMessage(content, sender) {
                removeTypingIndicator();
                
                const messageElement = document.createElement('div');
                messageElement.classList.add('kinetia-chat-message', sender);
                messageElement.textContent = content;
                
                chatMessages.appendChild(messageElement);
                
                // Scroll al final del chat
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Función para mostrar indicador de escritura
            function addTypingIndicator() {
                removeTypingIndicator(); // Eliminar indicador existente si lo hay
                
                const indicator = document.createElement('div');
                indicator.classList.add('kinetia-chat-message', 'bot', 'typing-indicator');
                indicator.textContent = 'Escribiendo...';
                
                chatMessages.appendChild(indicator);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Función para eliminar el indicador de escritura
            function removeTypingIndicator() {
                const typingIndicator = document.querySelector('.typing-indicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }
            
            // Generar ID único para el usuario
            function generateUserId() {
                if (!localStorage.getItem('kinetiaChatUserId')) {
                    localStorage.setItem('kinetiaChatUserId', 'user_' + Date.now());
                }
                return localStorage.getItem('kinetiaChatUserId');
            }
            
            // Event listeners para enviar mensajes
            chatSend.addEventListener('click', sendMessage);
            
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Mostrar notificación después de cierto tiempo
            setTimeout(function() {
                if (!chatWindow.classList.contains('active')) {
                    chatButton.classList.add('pulse');
                    chatNotification.style.display = 'flex';
                }
            }, 20000); // 20 segundos
            
            // Efecto de seguimiento del ratón - Línea continua
            const mouseTracker = document.getElementById('kinetiaMouseTracker');
            
            if (mouseTracker) {
                let trailElements = [];
                let lastX = 0;
                let lastY = 0;
                let isMoving = false;
                
                // Función para crear un elemento de rastro
                function createTrailElement(x, y) {
                    const trail = document.createElement('div');
                    trail.classList.add('kinetia-mouse-trail');
                    trail.style.left = x + 'px';
                    trail.style.top = y + 'px';
                    mouseTracker.appendChild(trail);
                    
                    // Animar desvanecimiento
                    setTimeout(() => {
                        if (trail.parentNode) {
                            trail.style.transition = 'opacity 0.8s ease-out';
                            trail.style.opacity = '0';
                            setTimeout(() => {
                                if (trail.parentNode) {
                                    trail.parentNode.removeChild(trail);
                                }
                                const index = trailElements.indexOf(trail);
                                if (index > -1) {
                                    trailElements.splice(index, 1);
                                }
                            }, 800);
                        }
                    }, 100);
                    
                    trailElements.push(trail);
                    
                    // Limitar elementos para rendimiento
                    if (trailElements.length > 100) {
                        const oldTrail = trailElements.shift();
                        if (oldTrail.parentNode) {
                            oldTrail.parentNode.removeChild(oldTrail);
                        }
                    }
                }
                
                // Función para crear línea continua entre dos puntos
                function createContinuousTrail(x1, y1, x2, y2) {
                    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
                    const steps = Math.max(1, Math.floor(distance / 3)); // Un punto cada 3 píxeles
                    
                    for (let i = 0; i <= steps; i++) {
                        const ratio = i / steps;
                        const x = x1 + (x2 - x1) * ratio;
                        const y = y1 + (y2 - y1) * ratio;
                        createTrailElement(x, y);
                    }
                }
                
                // Escuchar movimiento del ratón
                chatWindow.addEventListener('mousemove', function(e) {
                    const rect = chatWindow.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    
                    if (isMoving && (Math.abs(x - lastX) > 2 || Math.abs(y - lastY) > 2)) {
                        createContinuousTrail(lastX, lastY, x, y);
                    } else if (!isMoving) {
                        createTrailElement(x, y);
                        isMoving = true;
                    }
                    
                    lastX = x;
                    lastY = y;
                });
                
                // Resetear cuando el ratón sale de la ventana
                chatWindow.addEventListener('mouseleave', function() {
                    isMoving = false;
                });
            }
        });
    </script>
</body>
</html>
</body>
</html>
